/*	1
2	-------------------------------------------------------------------------------		
3	- Copyright (c) 2005, Shin Sahara		
4	- 		
5	- All rights reserved.		
6	- 		
7	- Redistribution and use in source and binary forms,		
8	- with or without modification, are permitted provided that		
9	- the following conditions are met:		
10	- 		
11	- * Redistributions of source code must retain the above copyright notice,		
12	-   this list of conditions and the following disclaimer.		
13	- * Redistributions in binary form must reproduce the above copyright notice,		
14	-   this list of conditions and the following disclaimer in the documentation		
15	-   and/or other materials provided with the distribution.		
16	- * Neither the name of the SCSK CORPORATION nor the names of		
17	-   its contributors may be used to endorse or promote products derived from		
18	-   this software without specific prior written permission.		
19	- 		
20	- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS		
21	- "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT		
22	- LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR		
23	- A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR		
24	- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,		
25	- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,		
26	- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR		
27	- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF		
28	- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING		
29	- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS		
30	- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.		
31	-------------------------------------------------------------------------------		
32	*/

class Date  is subclass of CalendarDefinition	-- 日付
/*
責任
	グレゴリオ歴の日付を表す。
概要
	私は、グレゴリオ歴の日付であり、グレゴリオ暦クラス（Calendar）と協調して暦の処理を行う。
	同一日付のオブジェクトは複数個あり得る。従って、日付が等しいことは等しい操作を使って判定する。
	日付の有効期限は、インスタンス変数で修正ユリウス日を2倍精度浮動小数点で持って計算しているので、実用上ほぼ無限である。
*/
	
instance variables--インスタンス変数

private 修正ユリウス日 : real := 0;
private 使用する暦 : Calendar;

/*
修正ユリウス日は、ユリウス日では数値が大きくなりすぎたので採用された日付を表す数値で、1858年11月17日を0とする。
計算誤差の関係から、2倍精度浮動小数点(Cではdouble)でなければならない。
*/

----照会
operations
public 曜日数を得る: () ==> Calendar`曜日数
曜日数を得る() == return 暦().曜日数を得る(self);

public 曜日名を得る : () ==> Calendar`曜日名
曜日名を得る() == return 暦().曜日名を得る(self) ;

--指定された曜日が、selfと日付の間に何日あるかを返す。 
public 指定曜日が何日あるか得る: Date * Calendar`曜日名 ==> int
指定曜日が何日あるか得る(日付,a曜日名) == 
	 return 暦().指定曜日が何日あるか得る(self,日付,a曜日名);

--selfと日付の間の休日あるいは日曜日の数を返す（開始日を含む）
public 休日数を得る: Date ==> int
休日数を得る(日付) == return 暦().休日数を得る(self,日付);

--selfと日付の間の休日あるいは日曜日の数を返す（開始日を含まない）
public 開始日を含まない休日数を得る: Date ==> int
開始日を含まない休日数を得る(日付) == 
	 return 暦().開始日を含まない休日数を得る(self,日付) ;

--日付から、その日付の属する年を求める。
public 年: () ==> int
年() == return 暦().年(self);
		
--日付から、その日付の属する月を求める。
public 月: () ==> int
月() == return 暦().月(self);
		
--日付から、日を求める。
public 日: () ==> int
日() == return 暦().日(self);

/* 計算  */

--休日でない日付を返す（未来へ向かって探索する）
public 未来の平日を得る : () ==> Date
未来の平日を得る() == return 暦().未来の平日を得る(self);

--休日でない日付を返す（過去へ向かって探索する）
public 過去の平日を得る : () ==> Date
過去の平日を得る() == return 暦().過去の平日を得る(self);

--selfに、平日n日分を加算する
public 平日を加算する : int ==> Date
平日を加算する(加算日数) == return 暦().平日を加算する(self,加算日数);

--selfに、平日n日分を減算する
public 平日を減算する : int ==> Date
平日を減算する(減算日数) == return 暦().平日を減算する(self,減算日数) ;

/* 検査 */

public 日曜日か？ : () ==> bool
日曜日か？() == return 暦().日曜日か？(self);

public 土曜日か？ : () ==> bool
土曜日か？() == return 暦().土曜日か？(self);

public ウィークデイか？ : () ==> bool
ウィークデイか？() == return 暦().ウィークデイか？(self);

public 平日か？ : () ==> bool
平日か？() == return 暦().平日か？(self);

public 休日か？ : () ==> bool 
休日か？() == return 暦().休日か？(self);

public お休みか？ : () ==> bool 
お休みか？() ==  return 暦().お休みか？(self);

--new Date().整数三つ組から日付を得る(2001,12,31).年始からの日数() = 365
public 年始からの日数: () ==> int
年始からの日数() == return 暦().年始からの日数(self);

/* 変換 */

public 年月日の整数三つ組を得る: () ==> int * int * int
年月日の整数三つ組を得る() == return mk_(self.年(), self.月(), self.日());

functions
private 文字列変換補助関数: int -> seq of char
文字列変換補助関数(整数) == 
	let	str = Integer`asString	in
	if 整数 >= 10 then str(整数) else "0" ^ str(整数);

operations
public 日付文字列を得る: () ==> seq of char
日付文字列を得る() == return self.asString();

----クラスレベルのインスタンス変数へのアクセス操作

----変換

public asString: () ==> seq of char
asString() ==
	(let	asString =Integer`asString,
		y = self.年(),
		m = self.月(),
		d = self.日(),
		年文字列 = asString(y),
		月文字列 = 文字列変換補助関数(m),
		日付文字列 = 文字列変換補助関数(d)
	in
		return 年文字列 ^ 月文字列 ^ 日付文字列
	);

public print: ()   ==> seq of char
print() ==
	(let	asString =Integer`asString,
		y = self.年(),
		m = self.月(),
		d = self.日(),
		年文字列 = asString(y),
		月文字列 = 文字列変換補助関数(m),
		日付文字列 = 文字列変換補助関数(d)
	in
		return 年文字列 ^ "年" ^ 月文字列 ^ "月" ^ 日付文字列 ^ "日"
	);


----比較

/*
操作名
	大小比較を行う関数群。
引数
	日付
返値
	真ならtrueを返し、そうでなければfalseを返す。
内容
	自身と与えられた日付の大小比較を行う。
*/
public 小さい: Date ==> bool
小さい(日付) == return floor self.修正ユリウス日獲得() < floor 日付.修正ユリウス日獲得();

public 大きい: Date ==> bool
大きい(日付) == return floor self.修正ユリウス日獲得() > floor 日付.修正ユリウス日獲得();

public 以下: Date ==> bool
以下(日付) == return not self.大きい(日付);

public 以上: Date ==> bool
以上(日付) == return not self.小さい(日付);

--自身と与えられた日付が等しいか判定する。
public 等しい: Date ==> bool	--等しければtrueを返し、そうでなければfalseを返す。
等しい(日付) ==  return (floor self.修正ユリウス日獲得() = floor 日付.修正ユリウス日獲得());

--自身と与えられた日付が等しくないか判定する。
public 等しくない: Date ==> bool	--等しければfalseを返し、そうでなければtrueを返す。
等しくない(日付) ==  return (floor self.修正ユリウス日獲得() <> floor 日付.修正ユリウス日獲得());

----計算

--自身に日数を加算した日付を返す
public ＋: int ==> Date
＋(加算日数) == return 暦().修正ユリウス日から日付を得る(self.修正ユリウス日獲得() + 加算日数) ;

--自身から日数を減算した日付を返す
public － : int ==> Date
－(減算日数) == return 暦().修正ユリウス日から日付を得る(self.修正ユリウス日獲得() - 減算日数) ;

--インスタンス変数へのアクセス操作

--修正ユリウス日
public 修正ユリウス日設定: real ==> ()
修正ユリウス日設定(実数) == 修正ユリウス日 := 実数;

public 修正ユリウス日獲得: () ==> real
修正ユリウス日獲得() == return 修正ユリウス日;

public 暦 : () ==> Calendar
暦() == return 使用する暦;

--構成子
public Date : Calendar * real ==> Date
Date(指定された暦, ある修正ユリウス日) == 
	(
	使用する暦 := 指定された暦;
	修正ユリウス日設定(ある修正ユリウス日);
	return self
	);

end Date