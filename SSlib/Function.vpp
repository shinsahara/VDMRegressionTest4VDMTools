\begin{vdm_al}
/*	1
2	-------------------------------------------------------------------------------		
3	- Copyright (c) 2005, Shin Sahara		
4	- 		
5	- All rights reserved.		
6	- 		
7	- Redistribution and use in source and binary forms,		
8	- with or without modification, are permitted provided that		
9	- the following conditions are met:		
10	- 		
11	- * Redistributions of source code must retain the above copyright notice,		
12	-   this list of conditions and the following disclaimer.		
13	- * Redistributions in binary form must reproduce the above copyright notice,		
14	-   this list of conditions and the following disclaimer in the documentation		
15	-   and/or other materials provided with the distribution.		
16	- * Neither the name of the SCSK CORPORATION nor the names of		
17	-   its contributors may be used to endorse or promote products derived from		
18	-   this software without specific prior written permission.		
19	- 		
20	- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS		
21	- "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT		
22	- LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR		
23	- A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR		
24	- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,		
25	- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,		
26	- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR		
27	- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF		
28	- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING		
29	- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS		
30	- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.		
31	-------------------------------------------------------------------------------		
32	*/
class Function
/*
責任
	関数プログラミングに関わる振る舞いを表す。
概要
	関数プログラミングに共通な機能を定義する。
参照
	多くの関数は、関数型プログラミング言語Concurrent Cleanのライブラリーから移植した。
*/
	
functions 
\end{vdm_al}

ある条件ｐが真になるまで、初期値xに関数fを繰り返し適用する。
\begin{vdm_al}
static public Funtil[@型] : (@型 -> bool) -> (@型 -> @型) -> @型 -> @型
Funtil(p)(f)(x) == if p(x) then x else Funtil[@型](p)(f)(f(x));
\end{vdm_al}

ある条件ｐが真である間、初期値xに関数fを繰り返し適用する。
\begin{vdm_al}
static public Fwhile[@型] : (@型 -> bool) -> (@型 -> @型) -> @型 -> @型
Fwhile(p)(f)(x) == if p(x) then Fwhile[@型](p)(f)(f(x)) else x;
\end{vdm_al}

関数の連続適用
\begin{vdm_al}
static public Seq[@型] : seq of (@型 -> @型) -> @型 -> @型
Seq(関数列)(引数) ==
	cases 関数列 :
	[先頭関数] ^ 後続関数列	-> Seq[@型](後続関数列)(先頭関数(引数)),
	[]					-> 引数
	end
--measure length
;

--static length[@型] : seq of (@型 -> @型) -> @型 -> nat
--length(関数列)(-) == len 関数列;
\end{vdm_al}

\begin{vdm_al}
static public 関数を読み込む[@型] : seq of char -> [@型]
関数を読み込む(ファイル名) ==
	let 
		io = new IO(),
		mk_(結果, f) = io.freadval[@型](ファイル名)
	in
	if 結果 then
		f
	else
		let -= io.echo("Can't read values from the data file = " ^ ファイル名)
		in
		nil;
\end{vdm_al}

\begin{vdm_al}
end Function
\end{vdm_al}