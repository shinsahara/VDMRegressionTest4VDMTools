/*	1
2	-------------------------------------------------------------------------------		
3	- Copyright (c) 2005, Shin Sahara		
4	- 		
5	- All rights reserved.		
6	- 		
7	- Redistribution and use in source and binary forms,		
8	- with or without modification, are permitted provided that		
9	- the following conditions are met:		
10	- 		
11	- * Redistributions of source code must retain the above copyright notice,		
12	-   this list of conditions and the following disclaimer.		
13	- * Redistributions in binary form must reproduce the above copyright notice,		
14	-   this list of conditions and the following disclaimer in the documentation		
15	-   and/or other materials provided with the distribution.		
16	- * Neither the name of the SCSK CORPORATION nor the names of		
17	-   its contributors may be used to endorse or promote products derived from		
18	-   this software without specific prior written permission.		
19	- 		
20	- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS		
21	- "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT		
22	- LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR		
23	- A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR		
24	- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,		
25	- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,		
26	- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR		
27	- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF		
28	- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING		
29	- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS		
30	- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.		
31	-------------------------------------------------------------------------------		
32	*/

/*
 *　発番者
 *　責任：　唯一の番号を発番する。
*/
class 発番者 is subclass of 共通定義

values
初期値 = 0;

instance variables
protected 番号  : int := 初期値		-- 次に発行する番号

operations
public 唯一の番号を得る : int * nat1 ==> int
唯一の番号を得る(数候補, 桁数) == 
	if 数候補 >= 10 ** 桁数 then 
		exit <前に出現した番号である>
		--return 番号を初期化する() 
	else
		return 数候補;

-- 与えられた桁数内の唯一の番号を発番する。
public 発番する : int ==> 文字列
発番する(桁数) ==
	-- 呼び出し時の番号の値で発番し、自身の番号の値に 1 を加える。
	let	数 = 唯一の番号を得る(番号, 桁数),
		cobolstring = String`subStrFill("00000000000000000000",1,桁数-1, '0') ^ "9"
	in
	(
	番号 := 番号 + 1;
	return Integer`asStringZ(cobolstring)(数)
	);
	
public 番号を初期化する : () ==> int
番号を初期化する() == 
	(
	番号 := 初期値;
	return 番号
	);

end  発番者
