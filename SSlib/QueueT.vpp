/*	1
2	-------------------------------------------------------------------------------		
3	- Copyright (c) 2005, Shin Sahara		
4	- 		
5	- All rights reserved.		
6	- 		
7	- Redistribution and use in source and binary forms,		
8	- with or without modification, are permitted provided that		
9	- the following conditions are met:		
10	- 		
11	- * Redistributions of source code must retain the above copyright notice,		
12	-   this list of conditions and the following disclaimer.		
13	- * Redistributions in binary form must reproduce the above copyright notice,		
14	-   this list of conditions and the following disclaimer in the documentation		
15	-   and/or other materials provided with the distribution.		
16	- * Neither the name of the SCSK CORPORATION nor the names of		
17	-   its contributors may be used to endorse or promote products derived from		
18	-   this software without specific prior written permission.		
19	- 		
20	- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS		
21	- "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT		
22	- LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR		
23	- A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR		
24	- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,		
25	- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,		
26	- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR		
27	- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF		
28	- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING		
29	- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS		
30	- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.		
31	-------------------------------------------------------------------------------		
32	*/
/*
テストグループ
	Queueのテスト
関連 UC
	なし
作成者
佐原伸
*/
class QueueT is subclass of TestDriver
functions
public tests : () -> seq of TestCase
tests () == 
	[ 
	new QueueT01(), new QueueT02()--, 
--	new QueueT03()
	];
end QueueT

/*
シナリオID
	待ち行列の基本関数を検査する。
*/
class QueueT01 is subclass of TestCase
operations 
public test: () ==> bool
test() == 
	let	q0 = Queue`empty[int](),
		q1 = Queue`enQueue[int](1, q0),
		q2 = Queue`enQueue[int](2, q1),
		q3 = Queue`enQueue[int](3, q2),
		[h] ^ tail = q3,
		h1 = Queue`top[int](q3),
		q4 = Queue`deQueue[int](q3),
		q5 = Queue`deQueue[int](q4),
		q6 = Queue`deQueue[int](q5),
		h2 =  Queue`top[int](q6),
		q7 = Queue`deQueue[int](q6)
	in
	return
		q0 = [] and
		q1 = [1] and
		q2 = [1,2] and
		q3 = [1,2,3] and
		h = 1 and tail = [2,3] and
		h1 = 1 and
		q4 = [2,3] and
		q5 = [3] and
		q6 = [] and
		h2 = nil and
		q7 = [] and
		Queue`isEmpty[int](q7) and
		not Queue`isEmpty[int](q5) 
;
protected 準備する: () ==> ()
準備する() == テスト名 := "QueueT01:\t待ち行列の検査";
protected 後始末する: () ==> ()
後始末する() == return;
end QueueT01

/*
シナリオID
	先頭と後続列を同時に得る関数を検査する。
*/
class QueueT02 is subclass of TestCase
operations 
public test: () ==> bool
test() == 
	let	q0 = Queue`empty[int](),
		q1 = Queue`enQueue[int](1, q0),
		q2 = Queue`enQueue[int](2, q1),
		q3 = Queue`enQueue[int](3, q2),
		[h] ^ tail = q3,	--情報隠蔽違反
		h1 = Queue`top[int](q3),
		q4 = Queue`deQueue[int](q3),
		mk_(h2, q5) = Queue`topAndDeQueue[int](q3)
	in
	return
		q0 = [] and
		q1 = [1] and
		q2 = [1,2] and
		q3 = [1,2,3] and
		h = 1 and tail =  [2,3] and
		h1 = 1 and q4 = [2,3] and
		h2 = 1 and q5 = [2, 3]
;
protected 準備する: () ==> ()
準備する() == テスト名 := "QueueT02:\t先頭と後続列を同時に得る";
protected 後始末する: () ==> ()
後始末する() == return;
end QueueT02

/*
シナリオID
	Queue4Threadクラスを使って先頭と後続列を同時に得る関数を検査する。
*/
/*
class QueueT03 is subclass of TestCase, Queue4Thread
values
qt = new Queue4Thread();

operations 
public test: () ==> bool
test() == (
	qt.Empty();
	qt.EnQueue(mk_Thread(1,100));
	qt.EnQueue(mk_Thread(2,200));
	qt.EnQueue(mk_Thread(3,300));
	return
		qt.TopAndDeQueue() = 
			mk_(mk_Thread(1,100), [mk_Thread(2,200), mk_Thread(3,300)]) 
);
protected 準備する: () ==> ()
準備する() == テスト名 := "QueueT03:\tQueue4Threadクラスを使って先頭と後続列を同時に得る";
protected 後始末する: () ==> ()
後始末する() == return;
end QueueT03
*/