/*	1
2	-------------------------------------------------------------------------------		
3	- Copyright (c) 2005, Shin Sahara		
4	- 		
5	- All rights reserved.		
6	- 		
7	- Redistribution and use in source and binary forms,		
8	- with or without modification, are permitted provided that		
9	- the following conditions are met:		
10	- 		
11	- * Redistributions of source code must retain the above copyright notice,		
12	-   this list of conditions and the following disclaimer.		
13	- * Redistributions in binary form must reproduce the above copyright notice,		
14	-   this list of conditions and the following disclaimer in the documentation		
15	-   and/or other materials provided with the distribution.		
16	- * Neither the name of the SCSK CORPORATION nor the names of		
17	-   its contributors may be used to endorse or promote products derived from		
18	-   this software without specific prior written permission.		
19	- 		
20	- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS		
21	- "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT		
22	- LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR		
23	- A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR		
24	- CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,		
25	- EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,		
26	- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR		
27	- PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF		
28	- LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING		
29	- NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS		
30	- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.		
31	-------------------------------------------------------------------------------		
32	*/
/*
テストグループ
	StringとCharacterのテスト
関連 UC
	なし
作成者
	佐原伸
*/
class StringT is subclass of TestDriver
functions
public tests : () -> seq of TestCase
tests () == 
	[
	new StringT05(), new StringT06(),
	new StringT01(), new StringT02(), 
	new StringT03(), new StringT04(),
	new StringT07(), new StringT08(),
	new StringT09(), 
	new StringT11(), new StringT12(),
	new StringT13(), new StringT14(),
	new StringT10()  -- VDMJの場合は、StringT10のテストを行うとエラーになる。
	];
end StringT

/*
シナリオID
	文字の変換シナリオ０１
内容
	数字を整数に変換
*/
class StringT01 is subclass of TestCase
operations 
public test: () ==> bool
test() == 
	let	c = new Character()	in
	tixe { <RuntimeError>  |->  return true } in
	return
		(
		c.isDigit('0') = true and
		c.isDigit('1') = true and
		c.isDigit('2') = true and
		c.isDigit('3') = true and
		c.isDigit('4') = true and
		c.isDigit('5') = true and
		c.isDigit('6') = true and
		c.isDigit('7') = true and
		c.isDigit('8') = true and
		c.isDigit('9') = true and
		c.isDigit('a') = false and
		c.asDigit('0') = 0 and
		c.asDigit('1') = 1 and
		c.asDigit('2') = 2 and
		c.asDigit('3') = 3 and
		c.asDigit('4') = 4 and
		c.asDigit('5') = 5 and
		c.asDigit('6') = 6 and
		c.asDigit('7') = 7 and
		c.asDigit('8') = 8 and
		c.asDigit('9') = 9 and
		c.asDigit('a') = false )
;
protected 準備する: () ==> ()
準備する() == テスト名 := "StringT01:\t数字を整数に変換。";
protected 後始末する: () ==> ()
後始末する() == return;
end StringT01

/*
シナリオID
	文字の変換シナリオ０2
内容
	文字の辞書順序を返す
*/
class StringT02 is subclass of TestCase
operations 
public test: () ==> bool
test() == 
	let	c = new Character()	in
	return
		(c.as辞書順序('0') = 1 and
		c.as辞書順序('9') = 10 and
		c.as辞書順序('a') = 11 and
		c.as辞書順序('A') = 12 and
		c.as辞書順序('z') = 61 and
		c.as辞書順序('Z') = 62 and
		c.as辞書順序('あ') = 63 and
		c.as辞書順序('+') = 999999 )
;
protected 準備する: () ==> ()
準備する() == テスト名 := "StringT02:\t文字の辞書順序を返す";
protected 後始末する: () ==> ()
後始末する() == return;
end StringT02

/*
シナリオID
	文字の比較シナリオ０１
内容
	文字列の大小を比較する。
*/
class StringT03 is subclass of TestCase
operations 
public test: () ==> bool
test() == 
	let	小さい = String`小さい,
		以下 = String`以下,
		大きい = String`大きい,
		以上 = String`以上
	in
	return
		小さい("1")("") = false and
		小さい("12")("") = false and
		小さい("123")("123") = false and
		大きい("123")("123") = false and
		大きい("123")("") = true and
		大きい("123")("23") = false and
		以下("123")("123") and
		以下("123")("1234") and
		以上("123")("1234") = false and
		not 以下("1234")("123") and
		以下("")("") and
		Sequence`fmap[seq of char, bool](小さい("123"))(["123", "1234", "", "223"]) = [false, true, false, true] and
		Sequence`fmap[seq of char, bool](以下("123"))(["1234", ""]) = [true, false] and
		Sequence`fmap[seq of char, bool](大きい("123"))([ "123", "", "23"]) = [false, true, false] and
		Sequence`fmap[seq of char, bool](以上("123"))(["1234", ""]) = [false, true] 
;
protected 準備する: () ==> ()
準備する() == テスト名 := "StringT03:\t文字列の大小を比較する。";
protected 後始末する: () ==> ()
後始末する() == return;
end StringT03

/*
シナリオID
	文字の比較シナリオ０2
内容
	文字列が等しいかを比較する。
*/
class StringT04 is subclass of TestCase
operations 
public test: () ==> bool
test() == 
	let	s1234 = "1234",
		s = new String()	in
	return
		s1234 = "1234" and
		s.isSpaces("") = true and
		s.isSpaces("  ") = true and
		s.isSpaces(" \t  ") = true and
		s.isSpaces([]) = true 
;
protected 準備する: () ==> ()
準備する() == テスト名 := "StringT04:\t文字列が等しいかを比較する";
protected 後始末する: () ==> ()
後始末する() == return;
end StringT04

/*
シナリオID
	文字の比較シナリオ０2
内容
	文字の大小を比較する。
*/
class StringT05 is subclass of TestCase
operations 
public test: () ==> bool
test() == 
	return
		Character`小さい('a')('a') = false and
		Character`大きい('a')('a') = false and
		Character`小さい('1')('2') and
		Character`大きい('1')('0') and
		Character`小さい('9')('a') and
		Character`大きい('あ')('0') and
		Character`以下('a')('0') = false and
		Character`以上('a')('0') and
		Sequence`fmap[char, bool](Character`小さい('5'))("456") = [false, false, true]
;
protected 準備する: () ==> ()
準備する() == テスト名 := "StringT05:\t文字の大小を比較する。";
protected 後始末する: () ==> ()
後始末する() == return;
end StringT05

/*
シナリオID
	部分文字列を得るシナリオ
内容
	部分文字列を得る。
*/
class StringT06 is subclass of TestCase
operations 
public test: () ==> bool
test() == 
	let	s = new String(),
		substr = String`SubStr
	in
	return
		(s.subStr("Shin Sahara",6,6) = "Sahara" and
		s.subStr("Shin Sahara",6,8) = "Sahara" and
		s.subStr("Shin Sahara",6,3) = "Sah" and
		s.subStr("Shin Sahara",1,0) = "" and
		s.subStrFill("sahara",1,3,'*') = "sah" and
		s.subStrFill("sahara",1,6,'*') = "sahara" and
		s.subStrFill("sahara",1,10,'*') = "sahara****" and
		s.subStrFill("sahara",3,4,'*') = "hara" and
		s.subStrFill("sahara",3,10,'*') = "hara******" and
		s.subStrFill("sahara",1,0,'*') = "" and
		s.subStrFill("",1,6,'*') = "******" and
		String`SubStr(6)(6)("Shin Sahara") = "Sahara" and
		substr(6)(8)("Shin Sahara") = "Sahara" and
		Sequence`fmap[seq of char, seq of char](substr(6)(8))(["1234567890", "12345671"]) = ["67890", "671"]
		)
;
protected 準備する: () ==> ()
準備する() == テスト名 := "StringT06:\t部分文字列を得る。";
protected 後始末する: () ==> ()
後始末する() == return;
end StringT06


/*
シナリオID
	数字文字列の扱いを検査するシナリオ
内容
	数字文字列の扱いを検査する。
*/
class StringT07 is subclass of TestCase
operations 
public test: () ==> bool
test() == 
	return
		(String`isDigits("1234567890")  = true and
		String`asInteger("1234567890")  = 1234567890 and
		String`asInteger("-1234567890")  = -1234567890 and
		String`asInteger("-1.5E10")  = -15000000000 and
		String`asInteger("")  = nil 
		)
;
protected 準備する: () ==> ()
準備する() == テスト名 := "StringT07:\t数字文字列の扱いを検査する。";
protected 後始末する: () ==> ()
後始末する() == return;
end StringT07

/*
シナリオID
	文字列に最初に出現する位置を検査するシナリオ
内容
	指定した文字が、文字列に最初に出現する位置を検査する。
*/
class StringT08 is subclass of TestCase
operations 
public test: () ==> bool
test() == 
	return
		(
		String`index("1234567890",'1')  = 1 and
		String`index("1234567890",'0') = 10 and
		String`index("1234567890",'a')  = 0 and
		String`indexAll("1234567890",'1')  = {1} and
		String`indexAll("1234567890",'0') = {10} and
		String`indexAll("1234567890",'a')  = {} and 
		String`indexAll("1231567190",'1')  = {1,4,8} and 
		String`indexAll("1231567191",'1')  = {1,4,8,10} and
		String`Index('1')("1234567890")  = 1 and
		String`Index('0')("1234567890") = 10 and
		String`Index('a')("1234567890")  = 0 and
		String`IndexAll('1')("1234567890")  = {1} and
		String`IndexAll('0')("1234567890") = {10} and
		String`IndexAll('a')("1234567890")  = {} and 
		String`IndexAll('1')("1231567190")  = {1,4,8} and 
		String`IndexAll('1')("1231567191")  = {1,4,8,10} and
		Sequence`fmap[seq of char, int](String`Index('1'))(["1234567890", "2345671"]) = [1, 7] and
		Sequence`fmap[seq of char, set of int](String`IndexAll('1'))(["1231567190", "1231567191"]) = [{1,4,8}, {1,4,8,10}]
		)
;
protected 準備する: () ==> ()
準備する() == テスト名 := "StringT08:\t指定した文字が、文字列に最初に出現する位置を検査する。";
protected 後始末する: () ==> ()
後始末する() == return;
end StringT08

/*
シナリオID
	指定した文字列が、ある文字列に含まれるかを検査するシナリオ
内容
	指定した文字列が、ある文字列に含まれるかを検査する。
*/
class StringT09 is subclass of TestCase
operations 
public test: () ==> bool
test() == 
	let 含む = String`含む
	in
	return
		(String`含む("1234567890")( "abc")  = false and
		含む("佐原伸")("佐原伸") = true and
		含む("佐原伸")("佐") = true and
		含む("佐原伸")("伸") = true and
		含む("佐原伸")("原") = true
		)
;
protected 準備する: () ==> ()
準備する() == テスト名 := "StringT09:\t指定した文字列が、ある文字列に含まれるかを検査する。";
protected 後始末する: () ==> ()
後始末する() == return;
end StringT09

/*
シナリオID
	指定した文字列が空の場合、ある文字列に含まれるかを検査するが、テストの意図通り、事前条件エラーが発生するシナリオ
内容
	指定した文字列が、ある文字列に含まれるかを検査する。
	事前条件エラーの場合の復旧処理を検査する。
	インタープリタでset exceptionとしておかなければならない。
*/
class StringT10 is subclass of TestCase
operations 
public test: () ==> bool
test() == 
		tixe { <RuntimeError>  |->  return true } in
		return String`含む("佐原伸")("")
;
protected 準備する: () ==> ()
準備する() == テスト名 := "StringT10:\t指定した文字列が空の場合、ある文字列に含まれるかを検査するが、テストの意図通り、事前条件エラーが発生する。";
protected 後始末する: () ==> ()
後始末する() == return;
end StringT10

/*
シナリオID
	指定した文字列の先頭tokenを得るシナリオ
内容
	事指定した文字列の先頭tokenを得るを検査する。
*/
class StringT11 is subclass of TestCase
operations 
public test: () ==> bool
test() == 
	return 
		let 区切り文字 = elems "\t\n " in
		String`GetToken("sahara\tshin", 区切り文字) = "sahara" and
		String`GetToken("sahara\tshin SCSK", 区切り文字) = "sahara" and
		String`DropToken("sahara\tshin", 区切り文字) = "\tshin" and
		String`DropToken("sahara\tshin SCSK", 区切り文字) = "\tshin SCSK" and
		String`DropToken("sahara\tshin SCSK\n", 区切り文字) = "\tshin SCSK\n"
;
protected 準備する: () ==> ()
準備する() == テスト名 := "StringT11:\t指定した文字列の先頭tokenを得る。";
protected 後始末する: () ==> ()
後始末する() == return;
end StringT11

/*
シナリオID
	文字列を行に分解するシナリオ
内容
	文字列を行に分解するかを検査する。
*/
class StringT12 is subclass of TestCase
operations 
public test: () ==> bool
test() == 
	return 
		let 対象文字列1 = "private 次状態を得る : () ==> 「状態」\n次状態を得る(aガード, aガード引数, aイベント, aイベント引数,  a処理時間) == (\ncases mk_(aガード, 現在状態, aイベント)  :\n\tmk_(-,-,(エラー検知)) -> return エラー中,\n",
			ss1 = String`getLines(対象文字列1),
			対象文字列2 = "佐原\n伸",
			ss2 = String`getLines(対象文字列2)
		in
		ss1(1) = "private 次状態を得る : () ==> 「状態」" and
		ss1(2) = "次状態を得る(aガード, aガード引数, aイベント, aイベント引数,  a処理時間) == (" and
		ss1(3) = "cases mk_(aガード, 現在状態, aイベント)  :" and
		ss1(4) = "\tmk_(-,-,(エラー検知)) -> return エラー中," and
		ss2(1) = "佐原" and
		ss2(2) = "伸"
;
protected 準備する: () ==> ()
準備する() == テスト名 := "StringT12:\t文字列を行に分解する。";
protected 後始末する: () ==> ()
後始末する() == return;
end StringT12

/*
シナリオID
	英数字か判定するシナリオ
内容
	英数字か判定が正しいかを検査する。
*/
class StringT13 is subclass of TestCase
operations 
public test: () ==> bool
test() == 
	return 
		let	w英字列 = "aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ",
			w数字列 = "0123456789",
			w英数字列 = w英字列 ^ w数字列
		in
		String`isLetters(w英字列) and
		not String`isLetters(" " ^ w英字列) and
		String`isDigits(w数字列) and
		not String`isDigits(" " ^ w数字列) and
		not String`isDigits("a" ^ w数字列) and
		String`isLetterOrDigits(w英数字列)  and
		not String`isLetterOrDigits(w英数字列 ^ " ") 
;
protected 準備する: () ==> ()
準備する() == テスト名 := "StringT13:\t英数字かの判定が正しいかを検査する。";
protected 後始末する: () ==> ()
後始末する() == return;
end StringT13

class StringT14 is subclass of TestCase
operations 
protected test: () ==> bool
test() == 
	let	isSomeString = String`isSomeString,
			f1 : char -> bool = Character`isLetterOrDigit,
			f2 : char  -> bool = Character`isCapitalLetter,
			f3 : char  -> bool = Character`isLowercaseLetter
	in	return 
		isSomeString(f1)("007isTheMmurder") and
		not isSomeString(f1)("007 is the mmurder") and
		isSomeString(f2)("SAHARA") and
		not isSomeString(f2)("Sahara") and
		isSomeString(f3)("sahara") and
		not isSomeString(f3)("Sahara") 
		
;
protected 準備する: () ==> ()
準備する() == テスト名 := "StringT14:\t 関数で指定した文字列種別か判定する。";
protected 後始末する: () ==> ()
後始末する() == return;
end StringT14


